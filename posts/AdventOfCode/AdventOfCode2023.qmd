---
title: 'Advent of Code 2023'
date: '2023-12-28'
#author: "Serban Dragne"
categories: ['R','Coding']
description: 'Mulled Wine and R'
execute:
  message: false
  warning: false
editor_options:
  chunk_output_type: console
---

As I'm hip and trendy, I discovered Advent of Code \[<https://adventofcode.com/2023>\] just a few days before the end of the year. In the spirit of not giving every waking moment of my xmas holidays to Where Eagles Dare, mince pies and mulled wine, I decided I should at least use my noodle a bit and do these puzzles.

## Day 1

### Part 1

```{r}
library(tidyverse)
library(data.table)

files <- read.csv("day1.csv", header = FALSE)
colnames(files) <- "input"

# create regex pattern to find the first number in a string 
first_pattern <- "\\d"

# regex to extract the last number in a string
last_pattern <- "\\d(?=[^\\d]*$)"


# create a new column with the first and last numbers in a string

files$first <- (stringr::str_extract(files$input,first_pattern))
files$last <- (stringr::str_extract(files$input,last_pattern))
files$NewNr <- as.numeric(paste0(files$first,files$last))

# sum the  column
sum(files$NewNr)



```

### Part 2

```{r}


# Part 2 

# list of numbers as words
numers_as_words  <- c("one","two","three","four","five","six","seven","eight","nine","1","2","3","4","5","6","7","8","9")
mapping <- c(1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9)

# get back a list showing the start and end points of a string that match any of the above
# numbers as words


#find the starting positions of where to find the numbers as words in the string
# return the max and min of the start column

#function to return the max value of the start column
max_start <- function(x){
  
   
  # find the starting location by matching either the digits or numbers in the long string 
  starting_positions = stringr::str_locate(x, numers_as_words)[,1] 

  # the lowest number corresponds to the first number in the string
  first = mapping[which(min(starting_positions,na.rm = TRUE) == starting_positions)]
  
  # find the last starting position for each
  end_positions <- stringr::str_locate_all(x, numers_as_words) %>% 
    sapply(.,max) %>% 
    # replace -Inf with NA b/c it returns stupid -Inf when it cant find a match 
    replace(., is.infinite(.), NA) 
  

  last = mapping[which(max(end_positions,na.rm = TRUE) == end_positions)]
  
  return(as.numeric(paste0(first,last)))

        
}


files$newNr2 <- sapply(files$input, max_start)


# this should work
sum(files$newNr2)

```

## Day 2

Are all of these challenges just going to be regexercises?

### Part 1

```{r}
library(tidyverse)


# read the data

input <- read_lines("day2.csv")


input <- as.data.frame(input)


# Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
# Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
# Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
# Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
# Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green



# separate the first column into two columns 
input <- input %>% 
  tidyr::separate(col = input, into = c("Game", "X1"), sep = ":", remove = TRUE) 

# Determine which games would have been possible if the bag had been loaded with only 
# 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?

# part 1 


data.frame(
  GameNr = 1:100,
  max_red = stringr::str_extract_all(input$X1, "(?<=\\b)(\\d+)(?=\\s*red\\b)") %>% sapply(., \(x) max(as.numeric(x))),
  max_blue = stringr::str_extract_all(input$X1, "(?<=\\b)(\\d+)(?=\\s*blue\\b)") %>% sapply(., \(x) max(as.numeric(x))),
  max_green = stringr::str_extract_all(input$X1, "(?<=\\b)(\\d+)(?=\\s*green\\b)") %>% sapply(., \(x) max(as.numeric(x)))
) %>%
  filter(max_red <= 12 & max_blue <= 14 & max_green <= 13) %>%
  summarise(sum(GameNr))

```

### Part 2

```{r}

# part 2
  
data.frame(
  GameNr = 1:100,
  min_red = stringr::str_extract_all(input$X1, "(?<=\\b)(\\d+)(?=\\s*red\\b)") %>% sapply(., \(x) max(as.numeric(x))),
  min_blue = stringr::str_extract_all(input$X1, "(?<=\\b)(\\d+)(?=\\s*blue\\b)") %>% sapply(., \(x) max(as.numeric(x))),
  min_green = stringr::str_extract_all(input$X1, "(?<=\\b)(\\d+)(?=\\s*green\\b)") %>% sapply(., \(x) max(as.numeric(x)))
) %>%
  mutate(Product = min_red * min_blue * min_green) %>%
  summarise(sum(Product))
  
```
